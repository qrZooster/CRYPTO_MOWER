# =====================================================================
# qr_watcher_v2.py ‚Äî QR Framework Context Builder
# created: 2025-10-19
# short description: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ./docs –∏ ./src, —Å–±–æ—Ä–∫–∞ START.json
# =====================================================================

import os, json, time
from pathlib import Path

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ---
PROJECT = "CRYPTO_MOWER"
REPO_URL = "https://raw.githubusercontent.com/qrZooster/CRYPTO_MOWER/main"
DOCS_DIR = Path(__file__).parent / "docs"
SRC_DIR = Path(__file__).parent / "src"
OUTPUT = Path(__file__).parent / "START.json"

CORE_FILES = [
    "bb_sys.py",
    "bb_db.py",
    "bb_controls.py",
    "bb_logger.py",
    "bb_events.py",
]
WORK_FILES = [
    "qr_watcher_v2.py",
    "qr_loader.py",
    "test_app.py",
    "main.py",
]


# --- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏ ---
IGNORE_LIST = [
    "__pycache__",
    ".venv",
    ".git",
    ".idea",
    "log",
    "START.json",
    "qr_watcher_v2.py",
    "qr_watcher_v3.py",
    "*.log",
    "*.tmp",
    "*.bak",
    "*.db",
    "*.sqlite",
]

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª ---
def should_ignore(file: Path) -> bool:
    name = file.name.lower()
    # –ø—Ä–µ—Ñ–∏–∫—Å—ã del_ –∏ tst_
    if name.startswith("del_") or name.startswith("tst_"):
        return True
    # –ø–æ —à–∞–±–ª–æ–Ω—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞
    for pat in IGNORE_LIST:
        if file.match(pat) or pat in file.parts:
            return True
    return False

# --- –£—Ç–∏–ª–∏—Ç–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞ ---
def get_file_stats(file_path: Path):
    text = file_path.read_text(encoding="utf-8")
    lines = text.count("\n") + 1
    bytes_ = file_path.stat().st_size
    updated = time.strftime(
        "%Y-%m-%dT%H:%M:%SZ", time.gmtime(file_path.stat().st_mtime)
    )
    return text, lines, bytes_, updated

# --- –£—Ç–∏–ª–∏—Ç–∞: –∑–∞–º–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ ---
def convert_links(text: str):
    text = text.replace("](./", f"]({REPO_URL}/docs/")
    text = text.replace("](../docs/", f"]({REPO_URL}/docs/")
    text = text.replace("](../src/", f"]({REPO_URL}/src/")
    return text

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ ---
def build_start_json():
    docs, core, work, code = [], [], [], []
    total_lines = total_bytes = 0

    # --- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ---
    if DOCS_DIR.exists():
        for file in DOCS_DIR.glob("*.md"):
            if should_ignore(file):
                continue
            content, lines, bytes_, updated = get_file_stats(file)
            content = convert_links(content)
            docs.append({
                "name": file.name,
                "dir": f"/docs",
                "lines": lines,
                "bytes": bytes_,
                "updated": updated,
                "content": content
            })
            total_lines += lines
            total_bytes += bytes_

    # --- –ö–æ–¥ ---
    search_dir = SRC_DIR if SRC_DIR.exists() else Path(__file__).parent

    for file in search_dir.glob("*.py"):
        if should_ignore(file):
            continue

        content, lines, bytes_, updated = get_file_stats(file)

        # --- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ---
        name = file.name
        if name in CORE_FILES:
            target = core
            dir_tag = "/core"
        elif name in WORK_FILES:
            target = work
            dir_tag = "/work"
        else:
            # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–¥—ë—Ç –≤ –æ–±—â–∏–π src, –µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
            target = code
            dir_tag = "/src" if SRC_DIR.exists() else "/"

        # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
        target.append({
            "name": name,
            "dir": dir_tag,
            "lines": lines,
            "bytes": bytes_,
            "updated": updated,
            "content": content
        })

        # --- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
        total_lines += lines
        total_bytes += bytes_

    data = {
        "meta": {
            "project": PROJECT,
            "updated": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
            "files_total": len(docs) + len(code),
            "lines_total": total_lines,
            "bytes_total": total_bytes
        },
        "docs": docs,
        "code": code
    }

    write_json("START", docs)
    write_json("START_CORE", core)
    write_json("START_WORK", work)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_files = len(docs) + len(core) + len(work)
    mb = total_bytes / 1024 / 1024
    print(f"[QR_Watcher] –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files} ({mb:.2f} MB, {total_lines} —Å—Ç—Ä–æ–∫)")
    print("[QR_Watcher] –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî START / CORE / WORK ‚öîÔ∏è")
    summarize_by_dir(docs + code)


# --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def watch_dirs():
    prev_state = {}
    def snapshot():
        paths = list(DOCS_DIR.glob("*.md")) + list(SRC_DIR.glob("*.py")) if SRC_DIR.exists() else list(DOCS_DIR.glob("*.md")) + list(Path(__file__).parent.glob("*.py"))
        return {p: p.stat().st_mtime for p in paths}

    prev_state = snapshot()
    build_start_json()
    print("[QR_Watcher] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω...\n")

    while True:
        time.sleep(2)
        current = snapshot()
        if current != prev_state:
            build_start_json()
            prev_state = current

# --- –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º ---
def summarize_by_dir(filesets):
    stats = {}
    for f in filesets:
        dir_name = f.get("dir", "/")
        if dir_name not in stats:
            stats[dir_name] = {"count": 0, "lines": 0, "bytes": 0}
        stats[dir_name]["count"] += 1
        stats[dir_name]["lines"] += f["lines"]
        stats[dir_name]["bytes"] += f["bytes"]
    print("[QR_Watcher] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º:")
    for k, v in sorted(stats.items()):
        kb = v["bytes"] / 1024
        print(f"  {k:<15} ‚Äî {v['count']} —Ñ–∞–π–ª–æ–≤, {v['lines']} —Å—Ç—Ä–æ–∫, {kb:.1f} KB")

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ JSON ---
def write_json(name: str, files: list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON."""
    if not files:
        print(f"[QR_Watcher] {name}.json ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return

    data = {
        "meta": {
            "project": "CRYPTO_MOWER",
            "part": name,
            "updated": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
            "files_count": len(files),
        },
        "files": files,
    }

    # —Å–æ–∑–¥–∞—ë–º –ø—É—Ç—å docs/CORE.json, docs/START.json, docs/WORK.json
    output_path = Path("docs") / f"{name}.json"
    output_path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

    mb = sum(f["bytes"] for f in files) / 1024 / 1024
    lines = sum(f["lines"] for f in files)
    print(f"[QR_Watcher] {name}.json –æ–±–Ω–æ–≤–ª—ë–Ω ({len(files)} —Ñ–∞–π–ª–æ–≤, {mb:.2f} MB, {lines} —Å—Ç—Ä–æ–∫)")


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("[QR_Watcher] –ó–∞–ø—É—Å–∫ QR_Watcher v2...")
    watch_dirs()
# =====================================================================
# üúÇ The End ‚Äî Tradition 2025 ‚öôÔ∏è
# =====================================================================
