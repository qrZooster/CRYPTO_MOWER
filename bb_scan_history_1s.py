# bb_scan_history_1s.py
# ALIAS: BB_SCAN_HISTORY_1S
# Created: 2025-09-24
# –°–∫–∞–Ω–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π (—Ü–µ–Ω–∞ + –æ–±—ä–µ–º) –ø–æ —Å–∏–º–≤–æ–ª—É ASPUSDT
# –î–µ–ª–∏—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Ç—Ä–µ–∑–∫–∏ –ø–æ 3 –º–∏–Ω—É—Ç—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –ø–∞–∫–µ—Ç–∞–º–∏ <200 —à—Ç—É–∫

import requests
from datetime import datetime, timedelta, timezone

from bb_db import DB
from bb_vars import BYBIT_REST

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ú–°–ö)
MSK = timezone(timedelta(hours=3))

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π —Å Bybit ---
def fetch_candles(symbol: str, start_time: datetime, end_time: datetime, interval: str = "1s"):
    url = f"{BYBIT_REST}/v5/market/kline"
    params = {
        "category": "linear",
        "symbol": symbol,
        "interval": interval,
        "start": int(start_time.timestamp()) * 1000,
        "end": int(end_time.timestamp()) * 1000,
        "limit": 200
    }
    r = requests.get(url, params=params, timeout=10)
    r.raise_for_status()
    data = r.json().get("result", {}).get("list", [])

    # Bybit –æ—Ç–¥–∞—ë—Ç —Å–≤–µ—á–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫ –ø–µ—Ä–≤—ã–º).
    data_sorted = sorted(data, key=lambda x: int(x[0]))  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏

    candles = []
    for k in data_sorted:
        ts = datetime.fromtimestamp(int(k[0]) / 1000, tz=MSK)
        candles.append({
            "datetime": ts,
            "open": float(k[1]),
            "high": float(k[2]),
            "low": float(k[3]),
            "close": float(k[4]),
            "volume": float(k[5])
        })
    return candles

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î ---
def save_candles_to_db(symbol: str, candles: list):
    db = DB()
    for c in candles:
        db.exec(
            "INSERT INTO ZZ$CANDELS_S1(FLD$SYMBOL, FLD$DATE_TIME, FLD$P_OPEN, FLD$P_CLOSE, FLD$P_HIGH, FLD$P_LOW, FLD$VOLUME, FLD$DATE_OTP) "
            "VALUES(%s,%s,%s,%s,%s,%s,%s,NOW())",
            (
                symbol,
                c["datetime"].strftime("%Y-%m-%d %H:%M:%S"),
                c["open"],
                c["close"],
                c["high"],
                c["low"],
                c["volume"]
            )
        )
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")

# --- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–∏ –ø–æ 3 –º–∏–Ω—É—Ç—ã ---
def split_interval(start_time: datetime, end_time: datetime, chunk_minutes: int = 3):
    intervals = []
    current = start_time
    while current < end_time:
        chunk_end = min(current + timedelta(minutes=chunk_minutes), end_time)
        intervals.append((current, chunk_end))
        # —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ +1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–≤–æ–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
        current = chunk_end + timedelta(seconds=1)
    return intervals

if __name__ == "__main__":
    symbol = "INUSDT"
    start_time = datetime(2025, 9, 24, 10, 50, tzinfo=MSK)
    end_time = datetime(2025, 9, 24, 11, 45, tzinfo=MSK)

    print(f"üîé –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—É–Ω–¥–Ω—ã–µ —Å–≤–µ—á–∏ {symbol} —Å {start_time} –ø–æ {end_time}...")
    all_candles = []

    for chunk_start, chunk_end in split_interval(start_time, end_time, chunk_minutes=3):
        print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {chunk_start} - {chunk_end}")
        candles = fetch_candles(symbol, chunk_start, chunk_end, interval="1s")
        if candles:
            save_candles_to_db(symbol, candles)
            all_candles.extend(candles)

    if all_candles:
        print(f"üïí –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: {all_candles[-1]['datetime']}")
