# bb_scan_9.py ‚Äî SCAN v9
# Refactored for Application / Module architecture
# 2025-10-12 15:35 / –£—á–∏—Ç–µ–ª—å & GPT-5

from collections import defaultdict, deque
import time
import json
import threading
import datetime as dt
import urllib.request

from bb_sys import *
from bb_db import *
from bb_ws import *

class TmodScan9(TModule):
    """
    SCAN v9 ‚Äî –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –º–æ–¥—É–ª—å –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Delphi.2025
    - REST-–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    - –ë—É—Ñ–µ—Ä —Å–≤–µ—á–µ–π (deque, maxlen=150)
    - –î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–∏–∫–æ–≤ (–Ω–∞ —É—Ä–æ–≤–Ω–µ close)
    - Flusher: –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –≤ –ë–î —á–µ—Ä–µ–∑ qr_foi
    """

    # —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–≤–µ—á–µ–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
    TBL_CANDLES = 'ZZ$CANDLES'

    # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞
    MAX_SYMBOLS      = 10     # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    POLL_INTERVAL_S  = 60     # –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞ REST-—Å–≤–µ—á–µ–π
    FLUSH_INTERVAL_S = 30     # –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–∏ –≤ –ë–î

    def __init__(self, app):
        super().__init__(app, "SCAN", 9)

        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
        self.symbols: list[str] = []
        self.candles: dict[str, deque] = defaultdict(lambda: deque(maxlen=150))
        self.last_price: dict[str, float] = defaultdict(lambda: None)
        self._stop = False
        self._flush_thread = None
        self.log("__init__", "module initialized")

    # ------------------------------------------------------------------
    # REST: –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    # ------------------------------------------------------------------
    def load_symbols(self) -> list[str]:
        """–ë–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –ª–∏–Ω–µ–π–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Bybit –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ *USDT."""
        url = f"{BYBIT_REST}/v5/market/instruments-info?category=linear"
        try:
            with urllib.request.urlopen(url, timeout=10) as resp:
                data = json.loads(resp.read().decode())
            rows = (data or {}).get("result", {}).get("list", []) or []
            symbols = [r["symbol"] for r in rows if str(r.get("symbol", "")).endswith("USDT")]
            symbols.sort()
            if self.MAX_SYMBOLS and len(symbols) > self.MAX_SYMBOLS:
                symbols = symbols[: self.MAX_SYMBOLS]
            self.log("load_symbols", f"{len(symbols)} symbols loaded")
            return symbols
        except Exception as e:
            self.log("load_symbols", f"‚ö†Ô∏è failed: {e}")
            return []

    # ------------------------------------------------------------------
    # REST: –æ–ø—Ä–æ—Å –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
    # ------------------------------------------------------------------
    def update_candles(self, symbol: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (interval=1) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±—É—Ñ–µ—Ä."""
        url = f"{BYBIT_REST}/v5/market/kline?category=linear&symbol={symbol}&interval=1"
        try:
            with urllib.request.urlopen(url, timeout=8) as resp:
                data = json.loads(resp.read().decode())

            items = (data or {}).get("result", {}).get("list", []) or []
            for row in items:
                if not isinstance(row, (list, tuple)) or len(row) < 6:
                    continue
                ts_ms = int(row[0])
                o, h, l, c, v = row[1:6]
                candle = {
                    "ts": ts_ms,
                    "open": float(o),
                    "high": float(h),
                    "low": float(l),
                    "close": float(c),
                    "volume": float(v),
                }
                self.candles[symbol].append(candle)

            # Tick detector: –∏–∑–º–µ–Ω–µ–Ω–∏–µ close
            if self.candles[symbol]:
                last_close = self.candles[symbol][-1]["close"]
                prev_close = self.last_price[symbol]
                if prev_close is None or last_close != prev_close:
                    self.last_price[symbol] = last_close
                    self.log("tick", f"{symbol} close={last_close}")

            self.log("update_candles", f"{symbol}: {len(self.candles[symbol])} buffered")

        except Exception as e:
            self.log("update_candles", f"‚ö†Ô∏è {symbol}: {e}")

    # ------------------------------------------------------------------
    # Flusher: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –≤ –ë–î
    # ------------------------------------------------------------------
    def flusher(self):
        """–†–∞–∑ –≤ FLUSH_INTERVAL_S –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –ë–î."""
        app = self.owner
        while not self._stop:
            saved = 0
            try:
                for sym, buf in list(self.candles.items()):
                    if not buf:
                        continue
                    last = buf[-1]
                    dt_msk = dt.datetime.fromtimestamp(last["ts"] / 1000.0, tz=MSK)
                    record = {
                        FLD_SYMBOL: sym,
                        FLD_DATE_TIME: dt_msk,
                        FLD_PRICE: last["close"],
                        FLD_VOLUME: last["volume"],
                        FLD_TYPE: "CANDLE_1M",
                        FLD_SOURCE: "SCAN9",
                    }
                    qr_foi(
                        self.TBL_CANDLES,
                        {FLD_SYMBOL: sym, FLD_DATE_TIME: dt_msk},
                        record,
                    )
                    saved += 1
                if saved:
                    self.log("flusher", f"batch saved ({saved} rows)")
            except Exception as e:
                self.log("flusher", f"‚ö†Ô∏è {e}")
            time.sleep(self.FLUSH_INTERVAL_S)

    # ------------------------------------------------------------------
    # Lifecycle
    # ------------------------------------------------------------------
    def do_open(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è SCAN_9."""
        self.log("do_open", "starting WS tick scan...")

        # 1) –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ä–µ–¥—ã
        app = self.owner
        self.log("do_open", f"Active project: {app.project_tag}")
        self.log("do_open", f"Session active: {app.Session.active}")
        self.log("do_open", f"Database active: {app.Database.active}")
        self.log("do_open", f"Config vars loaded: {len(app.Config.env)}")

        # 2) –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        self.symbols = self.load_symbols()
        if not self.symbols:
            self.log("do_open", "‚ö†Ô∏è no symbols loaded ‚Äî exiting do_open()")
            return False
        self.log("do_open", f"{len(self.symbols)} symbols ready for WS subscription")

        # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–∫-–¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        self.tick_detector = TTickDetector(self)
        self.tick_detector.bus.subscribe("tick_spike", db_signal_writer)
        self.log("do_open", "TickDetector and SignalBus initialized")

        # 4) –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
        try:
            self.ws = TBybitWS(self, self.symbols, self.tick_detector.feed)
            self.ws.open()
            self.log("do_open", "WebSocket connection started")
        except Exception as e:
            self.log("do_open", f"‚ö†Ô∏è failed to start WebSocket: {e}")
            return False

        # 5) –¶–∏–∫–ª heartbeat
        threading.Thread(target=self._heartbeat_loop, daemon=True).start()
        self._flush_thread = threading.Thread(target=self.flusher, daemon=True)
        self._flush_thread.start()
        return True

    def _heartbeat_loop(self):
        while not self._stop:
            ws_state = getattr(self.ws, "_connected", False)
            self.log("heartbeat", f"active symbols={len(self.symbols)}  ws_connected={ws_state}")
            time.sleep(30)

    def do_close(self) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É SCAN_9."""
        self._stop = True
        self.log("do_close", "stopping background threads...")

        try:
            if self.ws:
                self.ws.close()
        except Exception as e:
            self.log("do_close", f"‚ö†Ô∏è ws close error: {e}")

        # –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è flusher
        th = self._flush_thread
        if th and th.is_alive():
            try:
                th.join(timeout=5)
            except Exception:
                pass

        self.log("do_close", "module stopped gracefully")
        return True

# ==============================================================
#   MAIN ENTRY POINT
# ==============================================================

def main():
    app = Application()          # —Å–æ–∑–¥–∞—ë—Ç Database, Session, Config
    app.echo('Hello world!))')
    app.echo("üß† TSchema initialized")
    app.echo("<b>Loaded:</b> 37 tables")
    app.echo("‚öôÔ∏è Config vars: " + str(len(app.Config.env)))
    s = ""
    s += "<table border='1'>"
    s += "<tr>"
    s += "<td>"
    s += "column_1"
    s += "</td>"
    s += "<td>"
    s += "column_2"
    s += "</td>"
    s += "<td>"
    s += "column_3"
    s += "</td>"
    s += "</tr>"
    s += "</table>"
    app.echo(s)
    mod = TmodScan9(app)
    mod.open()                    # –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å
    try:
        # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º, –ø–æ–∫–∞ systemd –Ω–µ –ø—Ä–∏—à–ª—ë—Ç SIGTERM
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        mod.close()               # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å
        CloseApplication()       # graceful shutdown

if __name__ == '__main__':
    main()
