{
  "meta": {
    "project": "CRYPTO_MOWER",
    "part": "START_WORK",
    "updated": "2025-10-19T09:29:15Z",
    "files_count": 3
  },
  "files": [
    {
      "name": "bb_app_sys_control.py",
      "dir": "/work",
      "lines": 80,
      "bytes": 2911,
      "updated": "2025-10-18T12:55:54Z",
      "content": "import asyncio\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\nimport websockets  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç\nfrom bb_sys import *\nfrom bb_page import *\n\n\nclass TappSysControl(TApplication):\n    def __init__(self, service_name=\"bbscan.service\"):\n        super().__init__()\n        self.service_name = service_name\n        self.ws = None\n\n        # --- –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---\n        self.ensure_page_auto()\n\n    # -------------------------------------------------------------\n    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–∑ TApplication\n    # -------------------------------------------------------------\n    def generate_name(self) -> str:\n        \"\"\"–ò–º—è HTML-—Ñ–∞–π–ª–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã.\"\"\"\n        return \"bb_app_sys_control.html\"\n\n    def generate_page(self) -> str:\n        p = TxPage()\n        p.style = self.base_style()\n        p.h(1, f\"System Control ‚Äî {self.project_tag}\")\n        TxMonitor(port=8081).render(p)\n        return p.html()\n\n    # -------------------------------------------------------------\n    # WebSocket subsystem\n    # -------------------------------------------------------------\n    async def _attach_ws(self, host, port):\n        from _bb_ws import TWebSocketServer\n        self.ws = TWebSocketServer(None, host, port)\n        self.ws.open()\n        self.log(\"_attach_ws\", f\"‚úÖ WebSocket server started at ws://{host}:{port}\")\n\n    async def _stream_logs(self):\n        \"\"\"–ü–æ—Ç–æ–∫ –ª–æ–≥–æ–≤ –∏–∑ systemd-–∂—É—Ä–Ω–∞–ª–∞.\"\"\"\n        proc = await asyncio.create_subprocess_exec(\n            \"journalctl\", \"-fu\", self.service_name,\n            stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.STDOUT,\n        )\n        async for raw in proc.stdout:\n            line = raw.decode(errors=\"ignore\").rstrip()\n            if self.ws:\n                await self.ws.broadcast({\"type\": \"log\", \"text\": line})\n\n    async def _heartbeat(self, interval=60):\n        \"\"\"–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.\"\"\"\n        while True:\n            await asyncio.sleep(interval)\n            if self.ws:\n                await self.ws.broadcast({\"type\": \"ping\", \"time\": datetime.now().isoformat()})\n\n    async def start(self):\n        \"\"\"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤—Å–µ—Ö –ø–æ–¥—Å–∏—Å—Ç–µ–º.\"\"\"\n        await self._attach_ws(\"0.0.0.0\", 8081)\n        asyncio.create_task(self._stream_logs())\n        asyncio.create_task(self._heartbeat())\n\n        self.log(\"start\", \"üõ∞Ô∏è System Control started and running\")\n        while True:\n            await asyncio.sleep(1)\n\n\n\nif __name__ == \"__main__\":\n    print(\"üöÄ RUN: main starting\")\n\n    async def main():\n        app = TappSysControl(service_name=\"bbscan.service\")\n        await app.start()\n\n    asyncio.run(main())\n"
    },
    {
      "name": "bb_scan_9.py",
      "dir": "/work",
      "lines": 245,
      "bytes": 10147,
      "updated": "2025-10-18T12:55:54Z",
      "content": "# bb_scan_9.py ‚Äî SCAN v9\n# Refactored for Application / Module architecture\n# 2025-10-12 15:35 / –£—á–∏—Ç–µ–ª—å & GPT-5\n\nfrom collections import defaultdict, deque\nimport time\nimport json\nimport threading\nimport datetime as dt\nimport urllib.request\n\nfrom bb_sys import *\nfrom bb_db import *\nfrom bb_ws import *\n\nclass TmodScan9(TModule):\n    \"\"\"\n    SCAN v9 ‚Äî –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –º–æ–¥—É–ª—å –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Delphi.2025\n    - REST-–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤\n    - –ë—É—Ñ–µ—Ä —Å–≤–µ—á–µ–π (deque, maxlen=150)\n    - –î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–∏–∫–æ–≤ (–Ω–∞ —É—Ä–æ–≤–Ω–µ close)\n    - Flusher: –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –≤ –ë–î —á–µ—Ä–µ–∑ qr_foi\n    \"\"\"\n\n    # —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–≤–µ—á–µ–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)\n    TBL_CANDLES = 'ZZ$CANDLES'\n\n    # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞\n    MAX_SYMBOLS      = 10     # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞\n    POLL_INTERVAL_S  = 60     # –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞ REST-—Å–≤–µ—á–µ–π\n    FLUSH_INTERVAL_S = 30     # –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–∏ –≤ –ë–î\n\n    def __init__(self, app):\n        super().__init__(app, \"SCAN\", 9)\n\n        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è\n        self.symbols: list[str] = []\n        self.candles: dict[str, deque] = defaultdict(lambda: deque(maxlen=150))\n        self.last_price: dict[str, float] = defaultdict(lambda: None)\n        self._stop = False\n        self._flush_thread = None\n        self.log(\"__init__\", \"module initialized\")\n\n    # ------------------------------------------------------------------\n    # REST: –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤\n    # ------------------------------------------------------------------\n    def load_symbols(self) -> list[str]:\n        \"\"\"–ë–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –ª–∏–Ω–µ–π–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Bybit –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ *USDT.\"\"\"\n        url = f\"{BYBIT_REST}/v5/market/instruments-info?category=linear\"\n        try:\n            with urllib.request.urlopen(url, timeout=10) as resp:\n                data = json.loads(resp.read().decode())\n            rows = (data or {}).get(\"result\", {}).get(\"list\", []) or []\n            symbols = [r[\"symbol\"] for r in rows if str(r.get(\"symbol\", \"\")).endswith(\"USDT\")]\n            symbols.sort()\n            if self.MAX_SYMBOLS and len(symbols) > self.MAX_SYMBOLS:\n                symbols = symbols[: self.MAX_SYMBOLS]\n            self.log(\"load_symbols\", f\"{len(symbols)} symbols loaded\")\n            return symbols\n        except Exception as e:\n            self.log(\"load_symbols\", f\"‚ö†Ô∏è failed: {e}\")\n            return []\n\n    # ------------------------------------------------------------------\n    # REST: –æ–ø—Ä–æ—Å –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞\n    # ------------------------------------------------------------------\n    def update_candles(self, symbol: str):\n        \"\"\"–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (interval=1) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±—É—Ñ–µ—Ä.\"\"\"\n        url = f\"{BYBIT_REST}/v5/market/kline?category=linear&symbol={symbol}&interval=1\"\n        try:\n            with urllib.request.urlopen(url, timeout=8) as resp:\n                data = json.loads(resp.read().decode())\n\n            items = (data or {}).get(\"result\", {}).get(\"list\", []) or []\n            for row in items:\n                if not isinstance(row, (list, tuple)) or len(row) < 6:\n                    continue\n                ts_ms = int(row[0])\n                o, h, l, c, v = row[1:6]\n                candle = {\n                    \"ts\": ts_ms,\n                    \"open\": float(o),\n                    \"high\": float(h),\n                    \"low\": float(l),\n                    \"close\": float(c),\n                    \"volume\": float(v),\n                }\n                self.candles[symbol].append(candle)\n\n            # Tick detector: –∏–∑–º–µ–Ω–µ–Ω–∏–µ close\n            if self.candles[symbol]:\n                last_close = self.candles[symbol][-1][\"close\"]\n                prev_close = self.last_price[symbol]\n                if prev_close is None or last_close != prev_close:\n                    self.last_price[symbol] = last_close\n                    self.log(\"tick\", f\"{symbol} close={last_close}\")\n\n            self.log(\"update_candles\", f\"{symbol}: {len(self.candles[symbol])} buffered\")\n\n        except Exception as e:\n            self.log(\"update_candles\", f\"‚ö†Ô∏è {symbol}: {e}\")\n\n    # ------------------------------------------------------------------\n    # Flusher: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –≤ –ë–î\n    # ------------------------------------------------------------------\n    def flusher(self):\n        \"\"\"–†–∞–∑ –≤ FLUSH_INTERVAL_S –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –ë–î.\"\"\"\n        app = self.owner\n        while not self._stop:\n            saved = 0\n            try:\n                for sym, buf in list(self.candles.items()):\n                    if not buf:\n                        continue\n                    last = buf[-1]\n                    dt_msk = dt.datetime.fromtimestamp(last[\"ts\"] / 1000.0, tz=MSK)\n                    record = {\n                        FLD_SYMBOL: sym,\n                        FLD_DATE_TIME: dt_msk,\n                        FLD_PRICE: last[\"close\"],\n                        FLD_VOLUME: last[\"volume\"],\n                        FLD_TYPE: \"CANDLE_1M\",\n                        FLD_SOURCE: \"SCAN9\",\n                    }\n                    qr_foi(\n                        self.TBL_CANDLES,\n                        {FLD_SYMBOL: sym, FLD_DATE_TIME: dt_msk},\n                        record,\n                    )\n                    saved += 1\n                if saved:\n                    self.log(\"flusher\", f\"batch saved ({saved} rows)\")\n            except Exception as e:\n                self.log(\"flusher\", f\"‚ö†Ô∏è {e}\")\n            time.sleep(self.FLUSH_INTERVAL_S)\n\n    # ------------------------------------------------------------------\n    # Lifecycle\n    # ------------------------------------------------------------------\n    def do_open(self) -> bool:\n        \"\"\"–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è SCAN_9.\"\"\"\n        self.log(\"do_open\", \"starting WS tick scan...\")\n\n        # 1) –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ä–µ–¥—ã\n        app = self.owner\n        self.log(\"do_open\", f\"Active project: {app.project_tag}\")\n        self.log(\"do_open\", f\"Session active: {app.Session.active}\")\n        self.log(\"do_open\", f\"Database active: {app.Database.active}\")\n        self.log(\"do_open\", f\"Config vars loaded: {len(app.Config.env)}\")\n\n        # 2) –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤\n        self.symbols = self.load_symbols()\n        if not self.symbols:\n            self.log(\"do_open\", \"‚ö†Ô∏è no symbols loaded ‚Äî exiting do_open()\")\n            return False\n        self.log(\"do_open\", f\"{len(self.symbols)} symbols ready for WS subscription\")\n\n        # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–∫-–¥–µ—Ç–µ–∫—Ç–æ—Ä–∞\n        self.tick_detector = TTickDetector(self)\n        self.tick_detector.bus.subscribe(\"tick_spike\", db_signal_writer)\n        self.log(\"do_open\", \"TickDetector and SignalBus initialized\")\n\n        # 4) –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket\n        try:\n            self.ws = TBybitWS(self, self.symbols, self.tick_detector.feed)\n            self.ws.open()\n            self.log(\"do_open\", \"WebSocket connection started\")\n        except Exception as e:\n            self.log(\"do_open\", f\"‚ö†Ô∏è failed to start WebSocket: {e}\")\n            return False\n\n        # 5) –¶–∏–∫–ª heartbeat\n        threading.Thread(target=self._heartbeat_loop, daemon=True).start()\n        self._flush_thread = threading.Thread(target=self.flusher, daemon=True)\n        self._flush_thread.start()\n        return True\n\n    def _heartbeat_loop(self):\n        while not self._stop:\n            ws_state = getattr(self.ws, \"_connected\", False)\n            self.log(\"heartbeat\", f\"active symbols={len(self.symbols)}  ws_connected={ws_state}\")\n            time.sleep(30)\n\n    def do_close(self) -> bool:\n        \"\"\"–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É SCAN_9.\"\"\"\n        self._stop = True\n        self.log(\"do_close\", \"stopping background threads...\")\n\n        try:\n            if self.ws:\n                self.ws.close()\n        except Exception as e:\n            self.log(\"do_close\", f\"‚ö†Ô∏è ws close error: {e}\")\n\n        # –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è flusher\n        th = self._flush_thread\n        if th and th.is_alive():\n            try:\n                th.join(timeout=5)\n            except Exception:\n                pass\n\n        self.log(\"do_close\", \"module stopped gracefully\")\n        return True\n\n# ==============================================================\n#   MAIN ENTRY POINT\n# ==============================================================\n\ndef main():\n    app = Application()          # —Å–æ–∑–¥–∞—ë—Ç Database, Session, Config\n    app.echo('Hello world!))')\n    app.echo(\"üß† TSchema initialized\")\n    app.echo(\"<b>Loaded:</b> 37 tables\")\n    app.echo(\"‚öôÔ∏è Config vars: \" + str(len(app.Config.env)))\n    s = \"\"\n    s += \"<table border='1'>\"\n    s += \"<tr>\"\n    s += \"<td>\"\n    s += \"column_1\"\n    s += \"</td>\"\n    s += \"<td>\"\n    s += \"column_2\"\n    s += \"</td>\"\n    s += \"<td>\"\n    s += \"column_3\"\n    s += \"</td>\"\n    s += \"</tr>\"\n    s += \"</table>\"\n    app.echo(s)\n    mod = TmodScan9(app)\n    mod.open()                    # –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å\n    try:\n        # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º, –ø–æ–∫–∞ systemd –Ω–µ –ø—Ä–∏—à–ª—ë—Ç SIGTERM\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        pass\n    finally:\n        mod.close()               # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å\n        CloseApplication()       # graceful shutdown\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "name": "qr_watcher_v2.py",
      "dir": "/work",
      "lines": 239,
      "bytes": 8291,
      "updated": "2025-10-19T09:29:05Z",
      "content": "# =====================================================================\n# qr_watcher_v2.py ‚Äî QR Framework Context Builder\n# created: 2025-10-19\n# short description: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ./docs –∏ ./src, —Å–±–æ—Ä–∫–∞ START.json\n# =====================================================================\n\nimport os, json, time\nfrom pathlib import Path\n\n# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ---\nPROJECT = \"CRYPTO_MOWER\"\nREPO_URL = \"https://raw.githubusercontent.com/qrZooster/CRYPTO_MOWER/main\"\nDOCS_DIR = Path(__file__).parent / \"docs\"\nSRC_DIR = Path(__file__).parent / \"src\"\nOUTPUT = Path(__file__).parent / \"START.json\"\n\nCORE_FILES = [\n    \"bb_sys.py\",\n    \"bb_db.py\",\n    \"bb_controls.py\",\n    \"bb_logger.py\",\n    \"bb_events.py\",\n    \"bb_utils.py\",\n    \"bb_tg.py\",\n    \"bb_ws.py\",\n    \"_bb_ws.py\",\n]\n\nWORK_FILES = [\n    \"qr_watcher_v2.py\",\n    \"bb_scan_9.py\",\n    \"bb_app_sys_control.py\",\n    \"tst_controls.py\",\n]\n\n# --- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏ ---\nIGNORE_LIST = [\n    \"__pycache__\",\n    \".venv\",\n    \".git\",\n    \".idea\",\n    \"log\",\n    \"START.json\",\n    \"*.log\",\n    \"*.tmp\",\n    \"*.bak\",\n    \"*.db\",\n    \"*.sqlite\",\n]\n\n# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª ---\ndef should_ignore(file: Path) -> bool:\n    name = file.name.lower()\n    # –ø—Ä–µ—Ñ–∏–∫—Å—ã del_ –∏ tst_\n    if name.startswith(\"del_\") or name.startswith(\"tst_\"):\n        return True\n    # –ø–æ —à–∞–±–ª–æ–Ω—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞\n    for pat in IGNORE_LIST:\n        if file.match(pat) or pat in file.parts:\n            return True\n    return False\n\n# --- –£—Ç–∏–ª–∏—Ç–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞ ---\ndef get_file_stats(file_path: Path):\n    text = file_path.read_text(encoding=\"utf-8\")\n    lines = text.count(\"\\n\") + 1\n    bytes_ = file_path.stat().st_size\n    updated = time.strftime(\n        \"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(file_path.stat().st_mtime)\n    )\n    return text, lines, bytes_, updated\n\n# --- –£—Ç–∏–ª–∏—Ç–∞: –∑–∞–º–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ ---\ndef convert_links(text: str):\n    text = text.replace(\"](./\", f\"]({REPO_URL}/docs/\")\n    text = text.replace(\"](../docs/\", f\"]({REPO_URL}/docs/\")\n    text = text.replace(\"](../src/\", f\"]({REPO_URL}/src/\")\n    return text\n\n# --- –û—Å–Ω–æ–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ ---\ndef build_start_json():\n    docs, core, work, code = [], [], [], []\n    total_lines = total_bytes = 0\n\n    # --- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ---\n    if DOCS_DIR.exists():\n        for file in DOCS_DIR.glob(\"*.md\"):\n            if should_ignore(file):\n                continue\n            content, lines, bytes_, updated = get_file_stats(file)\n            content = convert_links(content)\n            docs.append({\n                \"name\": file.name,\n                \"dir\": f\"/docs\",\n                \"lines\": lines,\n                \"bytes\": bytes_,\n                \"updated\": updated,\n                \"content\": content\n            })\n            total_lines += lines\n            total_bytes += bytes_\n\n    # --- –ö–æ–¥ ---\n    search_dir = SRC_DIR if SRC_DIR.exists() else Path(__file__).parent\n\n    for file in search_dir.glob(\"*.py\"):\n        if should_ignore(file):\n            continue\n\n        content, lines, bytes_, updated = get_file_stats(file)\n\n        # --- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ---\n        name = file.name\n        if name in CORE_FILES:\n            target = core\n            dir_tag = \"/core\"\n        elif name in WORK_FILES:\n            target = work\n            dir_tag = \"/work\"\n        else:\n            # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–¥—ë—Ç –≤ –æ–±—â–∏–π src, –µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–ø–∏—Å–æ–∫\n            target = code\n            dir_tag = \"/src\" if SRC_DIR.exists() else \"/\"\n\n        # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---\n        target.append({\n            \"name\": name,\n            \"dir\": dir_tag,\n            \"lines\": lines,\n            \"bytes\": bytes_,\n            \"updated\": updated,\n            \"content\": content\n        })\n\n        # --- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---\n        total_lines += lines\n        total_bytes += bytes_\n\n    data = {\n        \"meta\": {\n            \"project\": PROJECT,\n            \"updated\": time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime()),\n            \"files_total\": len(docs) + len(code),\n            \"lines_total\": total_lines,\n            \"bytes_total\": total_bytes\n        },\n        \"docs\": docs,\n        \"code\": code\n    }\n\n    write_json(\"START\", docs)\n    write_json(\"START_CORE\", core)\n    write_json(\"START_WORK\", work)\n\n    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n    total_files = len(docs) + len(core) + len(work)\n    mb = total_bytes / 1024 / 1024\n    print(f\"[QR_Watcher] –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files} ({mb:.2f} MB, {total_lines} —Å—Ç—Ä–æ–∫)\")\n    print(\"[QR_Watcher] –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî START / CORE / WORK ‚öîÔ∏è\")\n    summarize_by_dir(docs + code)\n\n\n# --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---\ndef watch_dirs():\n    prev_state = {}\n    def snapshot():\n        paths = list(DOCS_DIR.glob(\"*.md\")) + list(SRC_DIR.glob(\"*.py\")) if SRC_DIR.exists() else list(DOCS_DIR.glob(\"*.md\")) + list(Path(__file__).parent.glob(\"*.py\"))\n        return {p: p.stat().st_mtime for p in paths}\n\n    prev_state = snapshot()\n    build_start_json()\n    print(\"[QR_Watcher] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω...\\n\")\n\n    while True:\n        time.sleep(2)\n        current = snapshot()\n        if current != prev_state:\n            build_start_json()\n            prev_state = current\n\n# --- –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º ---\ndef summarize_by_dir(filesets):\n    stats = {}\n    for f in filesets:\n        dir_name = f.get(\"dir\", \"/\")\n        if dir_name not in stats:\n            stats[dir_name] = {\"count\": 0, \"lines\": 0, \"bytes\": 0}\n        stats[dir_name][\"count\"] += 1\n        stats[dir_name][\"lines\"] += f[\"lines\"]\n        stats[dir_name][\"bytes\"] += f[\"bytes\"]\n    print(\"[QR_Watcher] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º:\")\n    for k, v in sorted(stats.items()):\n        kb = v[\"bytes\"] / 1024\n        print(f\"  {k:<15} ‚Äî {v['count']} —Ñ–∞–π–ª–æ–≤, {v['lines']} —Å—Ç—Ä–æ–∫, {kb:.1f} KB\")\n\n# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ JSON ---\ndef write_json(name: str, files: list):\n    \"\"\"–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON.\"\"\"\n    if not files:\n        print(f\"[QR_Watcher] {name}.json ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—â–µ–Ω–æ.\")\n        return\n\n    data = {\n        \"meta\": {\n            \"project\": \"CRYPTO_MOWER\",\n            \"part\": name,\n            \"updated\": time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime()),\n            \"files_count\": len(files),\n        },\n        \"files\": files,\n    }\n    # --- üî∏ –î–û–ë–ê–í–õ–Ø–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –§–õ–ê–ì –î–õ–Ø START ---\n    #--- Ult afqk---???\n    if name == \"START\":\n        data[\"meta\"][\"partial\"] = True\n        data[\"meta\"][\"note\"] = (\n            \"–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é. \"\n            \"–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å START_CORE.json –∏ START_WORK.json.\"\n        )\n        data[\"meta\"][\"next_parts\"] = [\"START_CORE.json\", \"START_WORK.json\"]\n\n    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª ---\n    # —Å–æ–∑–¥–∞—ë–º –ø—É—Ç—å docs/CORE.json, docs/START.json, docs/WORK.json\n    output_path = Path(\"docs\") / f\"{name}.json\"\n    output_path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding=\"utf-8\")\n\n    mb = sum(f[\"bytes\"] for f in files) / 1024 / 1024\n    lines = sum(f[\"lines\"] for f in files)\n    print(f\"[QR_Watcher] {name}.json –æ–±–Ω–æ–≤–ª—ë–Ω ({len(files)} —Ñ–∞–π–ª–æ–≤, {mb:.2f} MB, {lines} —Å—Ç—Ä–æ–∫)\")\n\n\n# --- –ó–∞–ø—É—Å–∫ ---\nif __name__ == \"__main__\":\n    print(\"[QR_Watcher] –ó–∞–ø—É—Å–∫ QR_Watcher v2...\")\n    watch_dirs()\n# =====================================================================\n# üúÇ The End ‚Äî Tradition 2025 ‚öôÔ∏è\n# =====================================================================\n"
    }
  ]
}