import asyncio
import json
from datetime import datetime
from pathlib import Path
import websockets  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from bb_sys import *
from bb_page import *


class TappSysControl(TApplication):
    def __init__(self, service_name="bbscan.service"):
        super().__init__()
        self.service_name = service_name
        self.ws = None

        # --- –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---
        self.ensure_page_auto()

    # -------------------------------------------------------------
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–∑ TApplication
    # -------------------------------------------------------------
    def generate_name(self) -> str:
        """–ò–º—è HTML-—Ñ–∞–π–ª–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã."""
        return "bb_app_sys_control.html"

    def generate_page(self) -> str:
        p = TxPage()
        p.style = self.base_style()
        p.h(1, f"System Control ‚Äî {self.project_tag}")
        TxMonitor(port=8081).render(p)
        return p.html()

    # -------------------------------------------------------------
    # WebSocket subsystem
    # -------------------------------------------------------------
    async def _attach_ws(self, host, port):
        from _bb_ws import TWebSocketServer
        self.ws = TWebSocketServer(None, host, port)
        self.ws.open()
        self.log("_attach_ws", f"‚úÖ WebSocket server started at ws://{host}:{port}")

    async def _stream_logs(self):
        """–ü–æ—Ç–æ–∫ –ª–æ–≥–æ–≤ –∏–∑ systemd-–∂—É—Ä–Ω–∞–ª–∞."""
        proc = await asyncio.create_subprocess_exec(
            "journalctl", "-fu", self.service_name,
            stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.STDOUT,
        )
        async for raw in proc.stdout:
            line = raw.decode(errors="ignore").rstrip()
            if self.ws:
                await self.ws.broadcast({"type": "log", "text": line})

    async def _heartbeat(self, interval=60):
        """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
        while True:
            await asyncio.sleep(interval)
            if self.ws:
                await self.ws.broadcast({"type": "ping", "time": datetime.now().isoformat()})

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤—Å–µ—Ö –ø–æ–¥—Å–∏—Å—Ç–µ–º."""
        await self._attach_ws("0.0.0.0", 8081)
        asyncio.create_task(self._stream_logs())
        asyncio.create_task(self._heartbeat())

        self.log("start", "üõ∞Ô∏è System Control started and running")
        while True:
            await asyncio.sleep(1)



if __name__ == "__main__":
    print("üöÄ RUN: main starting")

    async def main():
        app = TappSysControl(service_name="bbscan.service")
        await app.start()

    asyncio.run(main())
